pipeline {
    agent any
    environment {
        NAME = "tagdns_test"
        REPOSITORY = "https://github.com/tuimac/tagdns.git"
        DEPLOY = "/root/workplace"
        DOCKERFILE = "/root/workplace/tagdns/docker"
        TESTDIR = "/root/workplace/tagdns/test"
        REPORT = "/root/tagdns/test/unit/reports"
        IPADDR = "10.255.0.2"
    }
    stages("Tagdns Pipeline") {
        stage("Clone tagdns project") {
            steps {
                dir("${DEPLOY}") {
                    sh "rm -rf tagdns"
                    sh "git clone ${REPOSITORY}"
                    sh "cp -r ${HOME}/.aws ${DOCKERFILE}"
                }
            }
        }
        stage("Build Image") {
            steps {
                dir("${DOCKERFILE}") {
                    sh "docker build -t ${NAME} ."
                }
            }
            post {
                failure {
                    sh "python3 /root/tools/deletedockerenv.py ${NAME}"
                    echo "Failed to build image!"
                }
            }
        }
        stage("Create Docker Bridge Network") {
            steps {
                sh "docker network create \
                        --driver=bridge \
                        --subnet=10.255.0.0/28 \
                        --gateway=10.255.0.1 \
                        ${NAME}"
            }
            post {
                failure {
                    sh "python3 /root/tools/deletedockerenv.py ${NAME}"
                    echo "Failed to create bridge network!"
                }
            }
        }
        stage("Container Unit Test") {
            agent {
                docker {
                    image "${NAME}"
                    args "-itd --name ${NAME} \
                                -h ${NAME} \
                                -v /etc/localtime:/etc/localtime:ro \
                                -v /root/reports:/root/tagdns/test/unit/reports \
                                -v volume:/tmp \
                                --ip ${IPADDR} \
                                --network ${NAME}"
                }
            }
            steps {
                sh "pip3 install git+${REPOSITORY}"
                sh "cat /etc/tagdns/tagdns.yml"
                sh "tagdns &"
                sh "ls /var/log/tagdns"
                sh "python3 /root/tagdns/test/unit/test_endpoint.py"
            }
            post {
                always {
                    sh "cd ${REPORT}"
                    junit "*.xml"
                }
            }
        }
        stage("Start Container") {
            steps {
                sh "docker run -itd \
                                --name ${NAME} \
                                -h ${NAME} \
                                -v /etc/localtime:/etc/localtime:ro \
                                -v volume:/tmp \
                                --ip ${IPADDR} \
                                --network ${NAME} \
                                ${NAME}"
            }
            post {
                failure {
                    sh "python3 /root/tools/deletedockerenv.py ${NAME}"
                    echo "Failed to start container!"
                }
            }
        }
        stage("UDP connection Test") {
            steps {
                dir("${TESTDIR}/integration/connection") {
                    sh "python3 test_connection.py -v"
                }
            }
            post {
                failure {
                    echo "There is no connection."
                }
            }
        }
        stage("DNS Query Test") {
            steps {
                dir("${TESTDIR}/integration/dnsquery") {
                    sh "python3 test_dnsQuery.py -v"
                }
            }
            post {
                failure {
                    echo "Query name resolving was failed."
                }
            }
        }
    }
    post {
        always {
            sh "python3 /root/tools/deletedockerenv.py ${NAME}"
        }
        success {
            echo "No problem!!"
        }
        failure {
            echo "Failed to delete!"
        }
    }
}
